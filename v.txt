#include <stdio.h>
#include <mpi.h>

#define N 4

int primecheck(int n) {
    int flag = 0;
    for (int i = 2; i <= n / 2; i++) {
        if (n % i == 0) {
            flag = 1;
            break;
        }
    }
    return flag;
}
int main(int argc, char** argv) {
    int rank, size;
    int arr[N][N];
    //int outarr[N][N];
    //int row[N];
    //int evencnt = 0;
    //int oddcnt = 0;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        printf("Enter the numbers: ");
        fflush(stdout);
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                scanf_s("%d", &arr[i][j]);
            }
        }
        for (int i = 1; i < size; i++) {
           
            MPI_Send(arr, N*N, MPI_INT, i, 0, MPI_COMM_WORLD);
        }

    }

   
    else {
        int rarr[N][N];
        MPI_Status status;
        MPI_Recv(rarr, N*N, MPI_INT, rank - 1, 0, MPI_COMM_WORLD, &status);
        for (int j = 0; j < N; j++) {
            rarr[rank - 1][j] = primecheck(rarr[rank - 1][j]);
        }
        if (rank != size - 1) {
            MPI_Send(rarr, N * N, MPI_INT, rank + 1, 0, MPI_COMM_WORLD);
        }
        else {
            MPI_Send(rarr, N * N, MPI_INT, 0, 0, MPI_COMM_WORLD);
        }
    }
    
    
    if (rank == 0) {
        int rarr[N][N];
        MPI_Recv(rarr, N * N, MPI_INT, size - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                printf("%d ", rarr[i][j]);
            }
            printf("\n");
        }

    }

    MPI_Finalize();
    return 0;
}


#include<stdio.h>
#include<omp.h>
#define N 3

int main(){
	int C[N][N], D[N][N];
	int n;
	scanf("%d", &n);
	#pragma omp parallel num_threads(3) shared(C,D)
	{
		int A[N][N], B[N][N];
		#pragma omp single copyprivate(A,B)
		{
			printf("Enter the elements for matrix A.\n");
			for(int i = 0; i < N; i++){
				for(int j = 0; j<N; j++){
					scanf("%d", &A[i][j]);
					
				}
			}
			printf("Enter the elements for matrix B.\n");
			for(int i = 0; i < N; i++){
				for(int j = 0; j<N; j++){
					scanf("%d", &B[i][j]);
					
				}
			}
		}
		#pragma omp sections
		{
			#pragma omp section
			{
				#pragma omp parallel for collapse(2)
				for(int i = 0; i < N ; i++){
					for(int j = 0; j < N; j++){
						C[i][j] = A[i][j] + B[i][j];
					}
				}
			}
			#pragma omp section
			{
				#pragma omp parallel for collapse(2)
				for(int i = 0; i < N ; i++){
					for(int j = 0; j < N; j++){
						D[i][j] = A[i][j] * B[i][j];
					}
				}
			}
		}
		#pragma omp barrier
		int id = omp_get_thread_num();
		if(id == 1){
			for(int i = 0; i < N; i++){
				for(int j = 0; j<N; j++){
					printf("%d ", C[i][j]);
					
				}
				printf("\n");
			}
			for(int i = 0; i < N; i++){
				for(int j = 0; j<N; j++){
					printf("%d ", D[i][j]);
					
				}
				printf("\n");
			}
		}
		
	}
	return 0;
}