#include <stdio.h>
#include <mpi.h>

int main(int argc, char* argv[]) {
    MPI_Init(&argc, &argv);

    int num_procs, rank;
    MPI_Comm_size(MPI_COMM_WORLD, &num_procs);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    // Matrix dimensions
    const int N = 4; // Assuming square matrix of size NxN

    // Root process reads the input matrix
    int A[N][N];
    int local_A[N];

    if (rank == 0) {
        printf("Input Matrix A:\n");
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                A[i][j] = i * N + j + 1;
                printf("%d ", A[i][j]);
            }
            printf("\n");
        }
        printf("\n");
    }
    // Scatter one row of matrix A to each process
    MPI_Scatter(A, N, MPI_INT, local_A, N, MPI_INT, 0, MPI_COMM_WORLD);

    // Process the local row
    for (int i = 0; i < N; i++) {
        local_A[i] = (local_A[i] % 2 == 0) ? 0 : 1;
    }

    // Gather the results to the root process
    MPI_Gather(local_A, N, MPI_INT, A, N, MPI_INT, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("Processed Matrix A:\n");
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                printf("%d ", A[i][j]);
            }
            printf("\n");
        }
    }

    MPI_Finalize();
    return 0;
}
